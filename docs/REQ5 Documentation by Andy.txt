READ THE PDF FILE, THIS FILE IS THE RAW TXT VERSION

Recommending reading REQ4 Documentation and UML diagram first since some classes that appear to be missing relationships have already been added in previous UML diagrams

Added BuyItemAction that extends Action

WalletManager has a private constructor to prevent instantiation and has a private attribute of itself which can be 
retrieved by calling getInstance. Thus, it has an association with itself

I chose to add WalletManager instead of adding a private attribute called wallet into player so I don't need
to downcast Actor to Player when using BuyItemAction to check for wallet. Additionally, by logic, having a singleton wallet manager makes sense 
because only the player of the game will need access to the wallet. This also allows for extension of the wallet system
since it also allows other actors to collect coins FOR the player, such as coin collectors, which wouldn't be possible if we
used a wallet attribute for specific actors which requires downcasting.

Added PickupCoinAction that handles picking up coins that instantly add credits to WalletManager

PickupCoinAction has an association with the Coin class since it needs to be kept as an attribute to remove it from the map 
as well as show the appropriate message in menu.
The value of the coin also needs to be accessible.

Justification for the 0..* multiplicity between Actor and PickUpCoinAction is that an actor can have multiple PickUpCoinActions if 
there are multiple coins in the same location. 

PickupCoinAction has an important dependency with WalletManager since it must call getInstance then add the appropriate 
amount of credits corresponding to the coin's worth.


Added Purchasable interface with the methods purchasedBy(Actor actor) and getPrice() so that all buyable items present and future
can implement this interface. Follows OCP
The purchasedBy method allows us to add the item to the user's inventory without typecasting

Created Wrench class that extends WeaponItem and implements Purchasable

Made PowerStar and SuperMushroom also implement Purchasable

Added Toad class that extends NPC and has an association with Purchasable because he keeps an ArrayList of 
Purchable items that he can sell by iterating through the array and creating BuyItemActions for each item

BuyItemAction has a dependency with WalletManager and an association with Purchasable because it needs to be able to
call the purchasedBy method, (which will add the buyable item to the player's inventory) after deducting the balance from WalletManager, or if there is not enough credits,
then the item isn't added.

See BuyItemAction sequence diagram






