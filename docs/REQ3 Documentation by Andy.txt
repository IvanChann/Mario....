READ THE PDF FILE, THIS FILE IS THE RAW TXT VERSION

If you believe a relationship between classes is missing, it might be because the relationship is already included in the
other UML diagrams


Added NPC abstract class to extend Actor, since all NPCs have a TreeMap<Integer, Behaviour> to
keep track of the behaviours and the priority associated with the behaviours, friendly and hostile included. Allows for extension.
For instance, it is entirely plausible that Toad or some new friendly NPC might have some behaviours in the future.
The TreeMap of behaviours will be kept in this class with a getter that returns an unmodifiable copy to follow
defensive copying, also follows DRY. 

Added Enemy abstract class extending NPC, reason being that ALL enemies cannot enter floor,
and it is likely that in the future there will be some other feature exclusive to enemies implemented, follows DRY.
All future enemy classes added can extend this class

Added Goomba and Koopa class extending Enemy to diagram

Added AttackBehaviour that implements Behaviour, will scan the actor's surroundings
if it finds an actor with HOSTILE_TO_ENEMY it will return an AttackAction

FollowBehaviour is added to the TreeMap of behaviours in allowableActions for the enemies since allowableActions is called in the engine only when
the actors are near each other

Modified AttackBehaviour, FollowBehaviour and WanderBehaviour to store a constant PRIORITY indicating the priority of the behaviour
in the behaviour system. Avoids connascence of meaning/magic numbers

Modified Floor such that canActorEnter returns False for any actors with CANNOT_ENTER_FLOOR capability
Therefore added a noteworthy dependency between Floor and Status

Both Goomba and Koopa's attack damage are handled by overriding getIntrinsicWeapon

Overriding the PlayTurn method can handle the 10% chance of removing Goomba from the map

Dormant state will be kept as a Boolean attribute within the Koopa class, and Koopa will behave
differently depending on whether it is dormant or not. This is a better way of handling the dormant state than adding
a DormantKoopa class because an extra class won't reduce the amount of code/information needed but will create an extra
class with unnecessary dependencies/associations.

isConscious method will be overriden for Koopa to always return true, but if its health points
is not greater than 0 (checked by using super.isConscious), then the dormant attribute will be set to true, and its display character
will be changed to D

Wrench's shell destroying capability is implemented by using addCapability in the body
of its constructor. Thus, there is a noteworthy dependency between Wrench and Status

Added DestroyShellAction that extends Action. 
Basically, this action will just remove the target from the map but prints a custom message.
DestroyShellAction has association with Actor since it needs to keep track of the target of
the action.
The 0..8 multiplicity is because theoretically, there can be 8 shells around the player that can be
destroyed.




